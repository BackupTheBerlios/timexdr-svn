#!/bin/bash
# Convert timexdr text *.gps files into Garmin XML *.hst format.
# Written by Jan Merka, 2007.
#
# $Id$

TMP_FILE=/tmp/$( basename $0 )_$$.tmp
FIX_TYPE=( "none" "none" "2d" "3d" )
ROUTE_NAME="timexdr"
ROUTE_DESC="Recorded by Timex Data Recorder"
ROUTE_ID="1"
AUTHOR=

usage() {
  echo "Convert timexdr GPS data format to Garming HST XML format."
  echo
  echo "Usage: $( basename $0 ) [OPTIONS] file1"
  echo "Options:"
  echo -e "  -h\t\tDisplay usage information (this message)." 
  echo
  echo "File 'file1' holds timexdr GPS (*.gps) data."
  echo "The HST data are send to standard output."
  exit 1
}

get_file_type() {
  while [ $# -gt 0 ]; do
    [ -f "$1" ]  ||  ( echo "Input file $1 does not exist." ; exit 1 )
    if grep -q "HRM" "$1" 2>/dev/null ; then
	echo "HRM"
    elif grep -q "GPS" "$1" 2>/dev/null ; then
	echo "GPS"
    fi
    shift 1
  done
}

hst_header() {
  echo "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>"
  echo '<TrainingCenterDatabase xmlns="http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v1 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev1.xsd">'
  echo "<History>"
  echo "<Running Name=\"Running\">"
  echo "<Run>"
}

hst_lap_header() {
# starttime stoptime totaltime minlon maxlon minlat maxlat distance maxspeed
  tail -n 1 $TMP_FILE  |  cut -f 1,3,8,9  |  
  while read starttime totaltime distance maxspeed
  do 
  	echo "<Lap StartTime=\"${starttime:0:25}:${starttime:25:2}\">"
  	echo " <TotalTimeSeconds>${totaltime}</TotalTimeSeconds>"
  	echo " <DistanceMeters>${distance}</DistanceMeters>"
  	echo " <MaximumSpeed>${maxspeed}</MaximumSpeed>"
	echo " <Calories>0</Calories>"
	echo " <Intensity>Active</Intensity>"
  	echo " <TriggerMethod>Time</TriggerMethod>"
  	echo " <Track>"
  done
}

hst_lap_tail() {
  echo " </Track>"
  echo "</Lap>"
}

hst_tail() {
  echo "</Run>"
  echo "</Running>"
  echo "</History>"
  echo "</TrainingCenterDatabase>"
}

hst_trackpoint() {
# datetime lon lat alt spd pace dst acq
  echo -e "<Trackpoint>"
  echo -e "\t<Time>${datetime:0:25}:${datetime:25:2}</Time>"
  echo -e "\t<Position>"
  echo -e "\t\t<LatitudeDegrees>${lat}</LatitudeDegrees>"
  echo -e "\t\t<LongitudeDegrees>${lon}</LongitudeDegrees>"
  echo -e "\t</Position>"
  echo -e "\t<AltitudeMeters>${alt}</AltitudeMeters>"
  echo -e "\t<DistanceMeters>${dst}</DistanceMeters>"
  echo -e "\t<SensorState>Present</SensorState>"
  echo -e "</Trackpoint>"
}

[ $# -eq 0 ]  &&  usage

# Process options
while getopts ":a:d:hi:n:o:z:" OPT; do
  case $OPT in
   a)  AUTHOR="$OPTARG"	    	;;
   d)  ROUTE_DESC="$OPTARG" 	;;
   h)  usage             	;;
   i)  ROUTE_ID="$OPTARG" 	;;
   n)  ROUTE_NAME="$OPTARG" 	;;
   o)  out_file=$OPTARG 	;;
   z)  TIME_ZONE=$OPTARG     	;;
   *)  echo "Unimplemented option -${OPTARG}"
       usage            	;;
  esac
done
  
# Decrement the argument pointer so it points to next argument. $1 now 
# references the first non option item supplied on the command line if
# one exists.
shift $(( $OPTIND - 1 ))

# Check the data file
[ $( get_file_type "$1" ) == "GPS" ]  ||  usage
 
grep -v -e "GMT" -e "packet"  "$1"  |
gawk '{ 
  counter += 1; 
  if (counter == 3) {
          start_time = $1 "T" $2;
          split($1, date0, "-");
          split($2, tmp, ".");
          split(tmp[1], time0, ":");
  };
  if (counter > 2) { 
        stop_time = $1 "T" $2;
        split($1, date1, "-");
        split($2, tmp, ".");
        split(tmp[1], time1, ":");

        lon = $12;
        lat = $11;
        alt = $8;
        dist = $7*1000;
        spd = $6;
        if (spd > 0)    { pace = 60/spd } else { pace = 999 };
        if (pace > 999) { pace = 999 };
        acq = $4;
        
        # Make sure parameters are within limits
        if (lon >= 180)      { lon -= 360 };
        
        # Find min and max longitude/latitude, and other parameters
        if (acq > 0) { 
                cntr2 += 1;
                if (cntr2 == 1) {
                        minlat = lat;
                        maxlat = lat;
                        minlon = lon;
                        maxlon = lon;
                        maxspd = spd;
                } else {
                        if (minlat > lat) {minlat = lat};
                        if (maxlat < lat) {maxlat = lat};
                        if (minlon > lon) {minlon = lon};
                        if (maxlon < lon) {maxlon = lon};
                        if (maxspd < spd) {maxspd = spd};
                        }
        }
  
        printf "%s\t", stop_time;
        printf "%15.9f\t%14.9f\t%7.1f\t%5.1f\t%9.5f\t%10.3f\t%1.1d\n",
                lon, lat, alt, spd, pace, dist, acq ; 
   };
 } END { 
   # Start and stop times
   printf "%s\t%s\t", start_time, stop_time;

   # Total seconds
   str0 = date0[1] " " date0[2] " " date0[3];
   str0 = str0 " " time0[1] " " time0[2] " " time0[3];
   str1 = date1[1] " " date1[2] " " date1[3];
   str1 = str1 " " time1[1] " " time1[2] " " time1[3];

   printf "%d\t", mktime(str1) - mktime(str0);

   # Other parameters
   printf "%15.9f\t%15.9f\t%14.9f\t%14.9f\t%10.3f\t%5.1f\n",
        minlon, maxlon, minlat, maxlat, dist, maxspd ;
 }' > $TMP_FILE 

hst_header
hst_lap_header

# Remove the last row before parsing the TMP_FILE because the last
# row holds summary parameters displayed in the header
sed -i "\$d"  $TMP_FILE
cat           $TMP_FILE  |
while read  datetime lon lat alt spd pace dst acq; do
  hst_trackpoint
done
hst_lap_tail
hst_tail
rm  -f $TMP_FILE
